openapi: 3.0.3

info:
  title: School manager
  description:
    The specification contains API contracts for school manager operations exposed by the inventory module
  contact:
    name: Tatiana Krainikova
  license:
    name: study open projects
  version: 0.0.1

servers:
  - url: https://{region}.com/{apiVersion}
    description: Regional endpoints for different geographical areas
    variables:
      region:
        default: westus
        enum:
          - westus
          - eastus2
          - westcentralus
          - westeurope
          - southeastasia
      apiVersion:
        default: api
  - url: hhtp://localhost:{port}/api
    description: Base path
    variables:
      port:
        enum:
          - '8080'
          - '8000'
          - '5000'
        default: '8080'

tags:
  - name: StudentManager
    description: Api to manage student functions
  - name: TeacherManager
    description: Api to manage teacher functions
  - name: CourseManager
    description: Api to manage course functions
  - name: GroupManager
    description: Api to manage group functions

paths:
  /students/get/{id}:
    get:
      tags:
        - StudentManager
      description: Get student by id
      operationId: getStudentById
      parameters:
        - name: id
          in: path
          description: Id of student
          required: true
          schema:
            type: string
        - name: verbosity
          in: query
          description: Param need to filter fields for internal/external calls
          required: false
          schema:
            type: string
            default: all
            enum:
              - all
      responses:
        '200':
          description: Successfully returns Student instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
          links:
            GetUserById:
              operationId: getStudentById
              parameters:
                studentId: '$response.body#/id'
              description: |
                The `id` value returned in the response can be used as
                the `userId` parameter in `GET /users/{userId}`.
        '404':
          $ref: '#/components/responses/404StudentResponse'

  /students/put/{id}:
    put:
      tags:
        -  StudentManager
      description: Update some data in student
      operationId: updateStudent
      parameters:
        - name: id
          in: path
          description: Id of student
          required: true
          schema:
            type: string
        - in: header
          name: Accept-Language
          schema:
            type: string
            default: english
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
            examples:
              StudentBodyExample:
                summary: example of student
                value:
                  id: 5
                  name: Peter Panov
                  phone: 098-89-34-567
                  email: panov@gmail.com
      callbacks:
        myEvent:
          '{$request.body#/callbackUrl}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        message:
                          type: string
                          example: Some event happened
                      required:
                        - message
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      responses:
        '200':
          $ref: '#/components/responses/200StudentResponse'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          $ref: '#/components/responses/404Response'
        '404':
          $ref: '#/components/responses/404StudentResponse'

  /students/add:
    post:
      tags:
        -  StudentManager
      description: Post new student
      operationId: addStudent
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
            examples:
              StudentBodyExample:
                summary: example of student
                value:
                  id: 5
                  name: Peter Panov
                  phone: 098-89-34-567
                  email: panov@gmail.com
      responses:
        '200':
          $ref: '#/components/responses/200StudentResponse'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
          links:
            PostStudent:
              operationId: postStudent
              description: post new student
        '404':
          $ref: '#/components/responses/404Response'

  /students/get/all:
    get:
      tags:
        -  StudentManager
      description: Getting all students(list)
      operationId: getAllStudents
      responses:
        '200':
          description: Successfully returns a list of student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfStudents'
        '404':
          $ref: '#/components/responses/404Response'

  /students/delete/{id}:
    delete:
      tags:
        -  StudentManager
      description: Delete student by id
      operationId: deleteStudentById
      parameters:
        - name: id
          in: path
          description: Id of student
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success deleting student by id
        '404':
          $ref: '#/components/responses/404StudentResponse'


  /teachers/get/all:
    get:
      tags:
        -  TeacherManager
      description: Get all teachers(list)
      operationId: getAllTeachers
      responses:
        '200':
          description: Successfully returns a list of teachers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfTeachers'
        '404':
          $ref: '#/components/responses/404Response'

  /teachers/delete/{id}:
    delete:
      tags:
        -  TeacherManager
      description: Delete teacher by id
      operationId: fireTeacherById
      parameters:
        - name: id
          in: path
          description: Id of teacher
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success deleting teacher by id
        '404':
          $ref: '#/components/responses/404TeacherResponse'

  /teachers/create:
    post:
      tags:
        -  TeacherManager
      description: Create new teacher
      operationId: hireTeacher
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
            examples:
              TeacherBodyExample:
                summary: Example of teacher
                value:
                  id: 3
                  name: Alex Pletnev
                  phone: 098-56-90-875
                  email: pletnev@gmail.com
      responses:
        '200':
          $ref: '#/components/responses/200TeacherResponse'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        '404':
          $ref: '#/components/responses/404Response'

  /teachers/get/{id}:
    get:
      tags:
        - TeacherManager
      description: Get teacher by id
      operationId: getTeacherById
      parameters:
        - name: id
          in: path
          description: Id of teacher
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returns Teacher instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        '404':
          $ref: '#/components/responses/404TeacherResponse'

  /teacher/put/{id}:
    put:
      tags:
        -  TeacherManager
      description: Update some data in teacher
      operationId: updateTeacher
      parameters:
        - name: id
          in: path
          description: id of teacher
          required: true
          schema:
            type: string
        - in: header
          name: Accept-Language
          schema:
            type: string
            default: english
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
            examples:
              TeacherBodyExample:
                summary: example of teacher
                value:
                  id: 3
                  name: Alex Pletnev
                  phone: 098-56-90-875
                  email: pletnev@gmail.com
      responses:
        '200':
          $ref: '#/components/responses/200TeacherResponse'
        '400':
          $ref: '#/components/responses/404Response'
        '404':
          $ref: '#/components/responses/404TeacherResponse'

  /course/create:
    post:
      tags:
        -  CourseManager
      description: Create new Course
      operationId: createCourse
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
            examples:
              CourseBodyExample:
                summary: Example of course
                value:
                  id: 1
                  name: java Pro
                  cost: 15000
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '404':
          $ref: '#/components/responses/404Response'

  /course/delete/{id}:
    delete:
      tags:
        -  CourseManager
      description: Delete course by id
      operationId: deleteCourseById
      parameters:
        - name: id
          in: path
          description: Id of course
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success deleting course by id
        '404':
          $ref: '#/components/responses/404CourseResponse'

  /course/put/{id}:
    put:
      tags:
        -  CourseManager
      description: Update some data in course
      operationId: updateCourse
      parameters:
        - name: id
          in: path
          description: Id of course
          required: true
          schema:
            type: string
        - in: header
          name: Accept-Language
          schema:
            type: string
            default: english
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
            examples:
              CourseBodyExample:
                summary: Example of course
                value:
                  id: 1
                  name: java Pro
                  cost: 15000
      responses:
        '200':
          $ref: '#/components/responses/200CourseResponse'
        '400':
          $ref: '#/components/responses/404Response'
        '404':
          $ref: '#/components/responses/404CourseResponse'

  /courses/get/all:
    get:
      tags:
        -  CourseManager
      description: Get all courses
      operationId: getAllCourses
      responses:
        '200':
          description: Successfully returns a list of courses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfCourses'
        '404':
          $ref: '#/components/responses/404Response'

  /courses/get/{id}:
    get:
      tags:
        - CourseManager
      description: Get course by id
      operationId: getCourseById
      parameters:
        - name: id
          in: path
          description: Id of course
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returns course instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '404':
          $ref: '#/components/responses/404CourseResponse'

  /group/create:
    post:
      tags:
        -  GroupManager
      description: Create new Group
      operationId: createGroup
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
            examples:
              GroupBodyExample:
                summary: Example of group
                value:
                  id: 4
                  name: Group JavaPro
                  students: Peter, Alice, Taras
                  teacher: Alex
                  course: Java Pro
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          $ref: '#/components/responses/404Response'

  /group/delete/{id}:
    delete:
      tags:
        -  GroupManager
      description: Delete group by id
      operationId: deleteGroupById
      parameters:
        - name: id
          in: path
          description: Id of group
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success deleting group by id
        '404':
          $ref: '#/components/responses/404GroupResponse'

  /group/add/students/{id}:
    put:
      tags:
        -  GroupManager
      description: Add students to group
      operationId: addStudents
      parameters:
        - name: id
          in: path
          description: Id of group
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListOfStudents'
            examples:
              GroupBodyExample:
                summary: Example of group
                value:
                  id: 4
                  name: Group JavaPro
                  students: Peter, Alice, Taras
                  teacher: Alex
                  course: Java Pro
      responses:
        '200':
          $ref: '#/components/responses/200GroupResponse'
        '400':
          $ref: '#/components/responses/404Response'
        '404':
          $ref: '#/components/responses/404GroupResponse'

  /group/add/teacher/{id}:
    put:
      tags:
        -  GroupManager
      description: Add teacher to group
      operationId: addTeacher
      parameters:
        - name: id
          in: path
          description: Id of group
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
            examples:
              GroupBodyExample:
                summary: Example of group
                value:
                  id: 4
                  name: Group JavaPro
                  students: Peter, Alice, Taras
                  teacher: Alex
                  course: Java Pro
      responses:
        '200':
          $ref: '#/components/responses/200GroupResponse'
        '400':
          $ref: '#/components/responses/404Response'
        '404':
          $ref: '#/components/responses/404GroupResponse'

  /group/add/course/{id}:
    put:
      tags:
        -  GroupManager
      description: Add course to group
      operationId: addCourse
      parameters:
        - name: id
          in: path
          description: Id of group
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
            examples:
              GroupBodyExample:
                summary: Example of group
                value:
                  id: 4
                  name: Group JavaPro
                  students: Peter, Alice, Taras
                  teacher: Alex
                  course: Java Pro
      responses:
        '200':
          $ref: '#/components/responses/200GroupResponse'
        '400':
          $ref: '#/components/responses/404Response'
        '404':
          $ref: '#/components/responses/404GroupResponse'

  /group/get/{id}:
    get:
      tags:
        - GroupManager
      description: Get group by id
      operationId: getGroupById
      parameters:
        - name: id
          in: path
          description: Id of group
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returns group instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          $ref: '#/components/responses/404GroupResponse'

components:
  schemas:
    ProblemDetails:
      type: object
      properties:
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem.
        status:
          type: integer
          format: int32
          description: The HTTP status code for this occurrence of the problem.
        title:
          type: string
          description: problem(fail in system)
      required:
        - detail
        - status

    Student:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        phone:
          type: string
        email:
          type: string

    ListOfStudents:
      type: array
      items:
        $ref: '#/components/schemas/Student'

    Teacher:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        phone:
          type: string
        email:
          type: string

    ListOfTeachers:
      type: array
      items:
        $ref: '#/components/schemas/Teacher'

    Course:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        cost:
          type: integer

    ListOfCourses:
      type: array
      items:
        $ref: '#/components/schemas/Course'

    Group:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        students:
          type: array
          items:
            $ref: '#/components/schemas/Student'
        teacher:
          $ref: '#/components/schemas/Teacher'
        course:
          $ref: '#/components/schemas/Course'

    ListOfGroups:
      type: array
      items:
        $ref: '#/components/schemas/Group'

  responses:
    200StudentResponse:
      description: Successfully returns Student instance.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Student'
    200TeacherResponse:
      description: Successfully returns Teacher instance.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Teacher'
    200CourseResponse:
      description: Successfully returns Course instance.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Course'
    200GroupResponse:
      description: Successfully returns Group instance.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Group'
    404StudentResponse:
      description: A student with the specified ID was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    404TeacherResponse:
      description: A teacher with the specified ID was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    404CourseResponse:
      description: A course with the specified ID was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    404GroupResponse:
      description: A group with the specified ID was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    404Response:
      description: General problem. Something went wrong.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

  examples:
    StudentResponseExample:
      value:
        id: 5
        name: any person's first name and last name(Peter Panov)
        phone: phone number(098-89-34-567)
        email: email address(panov@gmail.com)
      summary: A sample object
    TeacherResponseExample:
      value:
        id: 3
        name: any person's first name and last name(Alex Pletnev)
        phone: phone number(098-56-90-875)
        email: email address(pletnev@gmail.com)
      summary: A sample object

